#BlueJ class context
comment0.params=
comment0.target=Character()
comment0.text=\r\n\ Instantiates\ a\ new\ character\r\n\ \r\n\ NOTE\:\ It\ is\ important\ to\ shove\ static\r\n\ variables\ in\ here,\ otherwise\ they\ don't\r\n\ get\ reset.\ For\ example,\ _claraDead.\ It's\r\n\ kind\ of\ important\ that\ she\ doesn't\ instantly\ \r\n\ die\ at\ the\ start\ of\ a\ new\ reset.\r\n
comment1.params=
comment1.target=void\ act()
comment1.text=\r\n\ Base\ act\ function\r\n
comment10.params=englishMessage
comment10.target=void\ showWarning(java.lang.String)
comment10.text=\r\n\ Shows\ a\ popup\ with\ a\ warning\ message\r\n
comment11.params=
comment11.target=MyClara\ getClara()
comment11.text=\r\n\ Returns\ the\ instance\ of\ the\ MyClara\ class\r\n
comment12.params=
comment12.target=GhostHealer\ getGhostHealer()
comment12.text=\r\n\ Returns\ the\ instance\ of\ the\ GhostHealer\ class\r\n
comment13.params=
comment13.target=GhostWall\ getGhostWall()
comment13.text=\r\n\ Returns\ the\ instance\ of\ the\ GhostWall\ class\r\n
comment14.params=actor
comment14.target=boolean\ isAboveMe(greenfoot.Actor)
comment14.text=\r\n\ Checks\ if\ the\ specified\ actor\ is\ above\ this\ one.\r\n\ \r\n\ returns\ true\ if\ the\ actor\ is\ indeed\ above\ the\ one\ calling\ this.\r\n
comment15.params=actor
comment15.target=boolean\ isBelowMe(greenfoot.Actor)
comment15.text=\r\n\ Checks\ if\ the\ specified\ actor\ is\ below\ this\ one.\r\n\ \r\n\ returns\ true\ if\ the\ actor\ is\ indeed\ below\ the\ one\ calling\ this.\r\n
comment16.params=actor
comment16.target=boolean\ isToMyLeft(greenfoot.Actor)
comment16.text=\r\n\ Checks\ if\ the\ specified\ actor\ is\ to\ the\ left\ this\ one.\r\n\ \r\n\ returns\ true\ if\ the\ actor\ is\ indeed\ to\ the\ left\ of\ the\ one\ calling\ this.\r\n
comment17.params=actor
comment17.target=boolean\ isToMyRight(greenfoot.Actor)
comment17.text=\r\n\ Checks\ if\ the\ specified\ actor\ is\ to\ the\ right\ this\ one.\r\n\ \r\n\ returns\ true\ if\ the\ actor\ is\ indeed\ to\ the\ right\ of\ the\ one\ calling\ this.\r\n
comment18.params=direction
comment18.target=void\ setDirection(java.lang.String)
comment18.text=\r\n\ Sets\ the\ direction\ of\ the\ character\ that\ calls\ it.\r\n\ \r\n\ Does\ not\ change\ the\ character's\ direction\ if\ there\r\n\ is\ a\ tree\ in\ the\ way.\r\n\ \r\n\ Valid\ inputs\ are\ "up",\ "down",\ "left"\ and\ "right".\r\n\ For\ the\ sake\ of\ simplicity,\ capitalisations\ will\ be\r\n\ ignored\ and\ the\ string\ will\ automatically\ be\r\n
comment19.params=
comment19.target=java.lang.String\ getDirection()
comment19.text=\r\n\ Gets\ the\ direction\ of\ the\ character\ that\ calls\ it\r\n\ \r\n\ Returns\ one\ of\ the\ following\:\r\n\ "up"\r\n\ "down"\r\n\ "left"\r\n\ "right"\r\n
comment2.params=
comment2.target=boolean\ treeFront()
comment2.text=\r\n\ Character\ checks\ if\ there\ is\ a\ tree\ in\ front\ of\ him\ <br>\r\n\ \r\n\ @return\ true\ if\ there\ is\ a\ tree\ in\ front\ of\ Character,\ false\ otherwise\r\n
comment20.params=totalAnimationFrames
comment20.target=void\ advanceAnimationFrame(int)
comment20.text=\r\n\ Advances\ to\ the\ next\ frame\ of\ the\ animation\r\n\ \r\n\ Requires\ total\ animation\ frames\ to\ be\ passed\ to\ it,\r\n\ this\ is\ because\ we're\ reusing\ the\ function\ for\ Clara,\r\n\ and\ simply\ changing\ the\ _totalAnimationFrames\ variable\r\n\ doesn't\ work\r\n
comment21.params=
comment21.target=void\ animate()
comment21.text=\r\n\ Advances\ the\ animation\ for\ the\ character\ calling\ it.\r\n\ \r\n\ NOTE\:\ That\ this\ function\ also\ rotates\ the\ image\ so\ character\ is\r\n\ facing\ the\ right\ way,\ i.e.\ for\ the\ Ghosts.\ Clara\ will\ need\ to\ override\ this.\r\n
comment22.params=
comment22.target=void\ animateDead()
comment22.text=\r\n\ Advances\ the\ dead\ animation\ for\ the\ character\ calling\ it.\r\n\ \r\n\ NOTE\:\ That\ this\ function\ also\ rotates\ the\ image\ so\ character\ is\r\n\ facing\ the\ right\ way,\ i.e.\ for\ the\ Ghosts.\ Clara\ will\ need\ to\ override\ this.\r\n
comment23.params=
comment23.target=void\ animateScared()
comment23.text=\r\n\ Advances\ the\ scared\ animation\ for\ the\ character\ calling\ it.\r\n\ \r\n\ NOTE\:\ That\ this\ function\ also\ rotates\ the\ image\ so\ character\ is\r\n\ facing\ the\ right\ way,\ i.e.\ for\ the\ Ghosts.\ Clara\ will\ need\ to\ override\ this.\r\n
comment24.params=
comment24.target=void\ wrapAroundWorld()
comment24.text=\r\n\ Automatically\ wraps\ the\ characters\ around\ the\ world\r\n
comment25.params=
comment25.target=boolean\ isScared()
comment25.text=\r\n\ Returns\ whether\ the\ entity\ is\ scared\ or\ not.\r\n
comment26.params=
comment26.target=void\ makeScared()
comment26.text=\r\n\ Makes\ the\ Ghosts\ scared\r\n
comment27.params=
comment27.target=boolean\ isClaraDead()
comment27.text=\r\n\ Returns\ whether\ Clara\ is\ dead\ or\ not.\r\n
comment28.params=
comment28.target=void\ makeClaraDead()
comment28.text=\r\n\ Makes\ Clara\ dead\r\n
comment29.params=
comment29.target=void\ playGhostEatenSound()
comment29.text=\r\n\ Plays\ Ghosts'\ death\ sound\r\n
comment3.params=
comment3.target=boolean\ ghostWallFront()
comment3.text=\r\n\ Character\ checks\ if\ there\ is\ a\ ghost\ wall\ in\ front\ of\ him\ <br>\r\n\ \r\n\ @return\ true\ if\ there\ is\ a\ ghost\ wall\ in\ front\ of\ Character,\ false\ otherwise\r\n
comment30.params=
comment30.target=void\ playPacmanIntro()
comment30.text=\r\n\ Plays\ the\ pacman\ intro\ sound\r\n
comment31.params=
comment31.target=boolean\ isPacmanIntroStillPlaying()
comment31.text=\r\n\ Checks\ if\ the\ pacman\ intro\ sound\ is\ still\ playing\r\n\ \r\n\ Returns\ true\ if\ it\ is,\ else\ false\r\n
comment32.params=move
comment32.target=void\ move(int)
comment32.text=\r\n\ Moves\ the\ character\ at\ the\ specified\ speed\r\n
comment33.params=
comment33.target=void\ moveIntoCellAndResetDistanceMoved()
comment33.text=\r\n\ Moves\ the\ character\ directly\ into\ the\ cell\ they\r\n\ are\ moving\ into,\ and\ then\ resets\ the\ distance\r\n\ moved\r\n
comment4.params=
comment4.target=boolean\ treeAbove()
comment4.text=\r\n\ Character\ checks\ if\ there\ is\ a\ tree\ on\ above\ the\ character\ <br>\r\n\ \r\n\ @return\ true\ if\ Character\ has\ a\ tree\ above\ them,\ false\ otherwise\r\n
comment5.params=
comment5.target=boolean\ treeBelow()
comment5.text=\r\n\ Character\ checks\ if\ there\ is\ a\ tree\ below\ the\ character\ <br>\r\n\ \r\n\ @return\ true\ if\ Character\ has\ a\ tree\ below\ the\ character,\ false\ otherwise\r\n
comment6.params=
comment6.target=boolean\ treeToLeft()
comment6.text=\r\n\ Character\ checks\ if\ there\ is\ a\ tree\ to\ the\ characters\ left\ <br>\r\n\ \r\n\ @return\ true\ if\ Character\ has\ a\ tree\ to\ his\ left,\ false\ otherwise\r\n
comment7.params=
comment7.target=boolean\ treeToRight()
comment7.text=\r\n\ Character\ checks\ if\ there\ is\ a\ tree\ to\ the\ characters\ right\ <br>\r\n\ \r\n\ @return\ true\ if\ Character\ has\ a\ tree\ to\ his\ right,\ false\ otherwise\r\n
comment8.params=direction\ steps\ clazz\ X\ Y
comment8.target=java.lang.Object\ getObjectInFront(int,\ int,\ java.lang.Class,\ int,\ int)
comment8.text=\r\n\ Finds\ an\ object\ in\ the\ specified\ direction.\r\n\ \r\n\ @param\ direction\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ direction\ in\ which\ to\ look\ for\ the\ object\r\n\ @param\ steps\r\n\ \ \ \ \ \ \ \ \ \ \ \ number\ of\ cells\ to\ look\ ahead\ (1\ means\ the\ next\ field,\ etc.)\r\n\ @param\ clazz\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ (actor)\ class\ to\ look\ for\r\n\ @param\ X\r\n\ \ \ \ \ \ \ \ \ \ x\ position\ to\ check\ from\r\n\ @param\ Y\r\n\ \ \ \ \ \ \ \ \ \ y\ position\ to\ check\ from\r\n\ @return\ the\ object\ that\ was\ found\ or\ null\ if\ none\ was\ found\r\n
comment9.params=a\ b
comment9.target=int\ modulo(int,\ int)
comment9.text=\r\n\ A\ special\ modulo\ operation\ that\ never\ returns\ a\ negative\ number.\ This\ is\r\n\ necessary\ to\ always\ stay\ inside\ the\ grid\ of\ the\ world.\r\n\ <p>\r\n\ The\ Java\ modulo\ operation\ would\ return\ -1\ for\ something\ like\ -1%10,\ but\r\n\ we\ would\ need\ 9.\r\n\ <p>\r\n\ Note\:\ Depending\ on\ the\ programming\ language,\ the\ modulo\ operation\ for\r\n\ negative\ numbers\ is\ defined\ differently.\r\n\ \r\n\ @param\ a\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ first\ operand\r\n\ @param\ b\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ second\ operand\r\n\ @return\ the\ result\ of\ the\ modulo\ operation,\ always\ positive\r\n
numComments=34
